# name: CI

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     services:
#       kafka:
#         image: confluentinc/cp-kafka:7.5.0
#         env:
#           KAFKA_BROKER_ID: 1
#           KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#           KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#           KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#           KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#           KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#           KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#           KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#         ports:
#           - 9092:9092
#         options: >-
#           --health-cmd "kafka-broker-api-versions --bootstrap-server localhost:9092"
#           --health-interval 30s
#           --health-timeout 10s
#           --health-retries 3
      
#       zookeeper:
#         image: confluentinc/cp-zookeeper:7.5.0
#         env:
#           ZOOKEEPER_CLIENT_PORT: 2181
#           ZOOKEEPER_TICK_TIME: 2000
#         ports:
#           - 2181:2181

#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Go
#       uses: actions/setup-go@v4
#       with:
#         go-version: '1.24'

#     - name: Install dependencies
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y gcc sqlite3 libsqlite3-dev

#     - name: Download dependencies
#       run: go mod download

#     - name: Verify dependencies
#       run: go mod verify

#     - name: Build
#       run: go build -v ./...

#     - name: Run tests
#       run: go test -v -race -coverprofile=coverage.out ./...

#     - name: Generate coverage report
#       run: go tool cover -html=coverage.out -o coverage.html

#     - name: Upload coverage to Codecov
#       uses: codecov/codecov-action@v3
#       with:
#         files: ./coverage.out
#         flags: unittests
#         name: codecov-umbrella

#   build:
#     runs-on: ubuntu-latest
#     needs: test
    
#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Go
#       uses: actions/setup-go@v4
#       with:
#         go-version: '1.24'

#     - name: Install dependencies
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y gcc sqlite3 libsqlite3-dev

#     - name: Build for Linux
#       run: |
#         CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o messagebridge-linux .

#           - name: Upload build artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: messagebridge-linux
#           path: messagebridge-linux

#   docker:
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Login to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Extract metadata
#       id: meta
#       uses: docker/metadata-action@v5
#       with:
#         images: ${{ secrets.DOCKER_USERNAME }}/messagebridge
#         tags: |
#           type=ref,event=branch
#           type=ref,event=pr
#           type=sha,prefix=sha-
#           type=raw,value=latest,enable={{is_default_branch}}

#     - name: Build and push Docker image
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         platforms: linux/amd64,linux/arm64
#         push: true
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max 