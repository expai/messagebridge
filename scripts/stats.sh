#!/bin/bash

# MessageBridge Database Statistics Script
# –ê–≤—Ç–æ—Ä: MessageBridge Team
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

set -euo pipefail

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DB_PATH="/var/lib/messagebridge/messages.db"
DEFAULT_LIMIT=20
DEFAULT_PAGE=1

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    cat << EOF
üîç MessageBridge Database Statistics Tool

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 [–û–ü–¶–ò–ò]

–û–ü–¶–ò–ò:
    -h, --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -d, --database PATH     –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DB_PATH)
    
–†–ï–ñ–ò–ú–´ –ü–†–û–°–ú–û–¢–†–ê:
    --summary               –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    --messages              –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    --status STATUS         –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (pending, sent, failed, retrying)
    --queue QUEUE           –§–∏–ª—å—Ç—Ä –ø–æ –æ—á–µ—Ä–µ–¥–∏
    --message-id ID         –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    --failed-details        –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    --retry-analysis        –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    --performance           –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    --cleanup-suggestions   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ—á–∏—Å—Ç–∫–µ –ë–î

–û–ü–¶–ò–ò –ü–ê–ì–ò–ù–ê–¶–ò–ò:
    --page N                –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DEFAULT_PAGE)
    --limit N               –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DEFAULT_LIMIT)

–û–ü–¶–ò–ò –í–´–í–û–î–ê:
    --json                  –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    --csv                   –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
    --no-color              –û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥

–ü–†–ò–ú–ï–†–´:
    $0                                          # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    $0 --messages --page 2 --limit 10          # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (10 –∑–∞–ø–∏—Å–µ–π)
    $0 --status pending                         # –¢–æ–ª—å–∫–æ pending —Å–æ–æ–±—â–µ–Ω–∏—è
    $0 --failed-details                         # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    $0 --message-id "msg-123"                   # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    $0 --queue payments --json                  # JSON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ payments
    $0 --retry-analysis                         # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    $0 --performance                            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    if [[ ! -f "$DB_PATH" ]]; then
        echo -e "${RED}‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $DB_PATH${NC}" >&2
        echo -e "${YELLOW}üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MessageBridge –∑–∞–ø—É—â–µ–Ω –∏ —Å–æ–∑–¥–∞–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö${NC}" >&2
        exit 1
    fi
    
    if ! command -v sqlite3 &> /dev/null; then
        echo -e "${RED}‚ùå sqlite3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}" >&2
        echo -e "${YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install sqlite3 (Ubuntu/Debian) –∏–ª–∏ sudo pacman -S sqlite (Arch)${NC}" >&2
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞
execute_sql() {
    local query="$1"
    local format="${2:-table}"
    
    case "$format" in
        "json")
            sqlite3 -json "$DB_PATH" "$query"
            ;;
        "csv")
            sqlite3 -csv "$DB_PATH" "$query"
            ;;
        "table")
            sqlite3 -header -column "$DB_PATH" "$query"
            ;;
        *)
            sqlite3 "$DB_PATH" "$query"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_summary() {
    local format="$1"
    
    if [[ "$format" == "json" ]]; then
        cat << EOF
{
  "database_info": $(execute_sql "SELECT 
    (SELECT COUNT(*) FROM messages) as total_messages,
    (SELECT COUNT(*) FROM messages WHERE status = 'pending') as pending,
    (SELECT COUNT(*) FROM messages WHERE status = 'sent') as sent,
    (SELECT COUNT(*) FROM messages WHERE status = 'failed') as failed,
    (SELECT COUNT(*) FROM messages WHERE status = 'retrying') as retrying,
    (SELECT ROUND(AVG(retries), 2) FROM messages WHERE retries > 0) as avg_retries,
    (SELECT MAX(retries) FROM messages) as max_retries,
    (SELECT COUNT(DISTINCT queue) FROM messages) as unique_queues,
    (SELECT datetime(MIN(created_at), 'localtime') FROM messages) as oldest_message,
    (SELECT datetime(MAX(created_at), 'localtime') FROM messages) as newest_message" json),
  "queue_stats": $(execute_sql "SELECT queue, COUNT(*) as count FROM messages GROUP BY queue ORDER BY count DESC" json),
  "status_by_queue": $(execute_sql "SELECT queue, status, COUNT(*) as count FROM messages GROUP BY queue, status ORDER BY queue, status" json)
}
EOF
        return
    fi
    
    echo -e "${CYAN}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local stats=$(execute_sql "SELECT 
        (SELECT COUNT(*) FROM messages) as total,
        (SELECT COUNT(*) FROM messages WHERE status = 'pending') as pending,
        (SELECT COUNT(*) FROM messages WHERE status = 'sent') as sent,
        (SELECT COUNT(*) FROM messages WHERE status = 'failed') as failed,
        (SELECT COUNT(*) FROM messages WHERE status = 'retrying') as retrying,
        (SELECT ROUND(AVG(retries), 2) FROM messages WHERE retries > 0) as avg_retries,
        (SELECT MAX(retries) FROM messages) as max_retries,
        (SELECT COUNT(DISTINCT queue) FROM messages) as queues" "raw")
    
    local total=$(echo "$stats" | cut -d'|' -f1)
    local pending=$(echo "$stats" | cut -d'|' -f2)
    local sent=$(echo "$stats" | cut -d'|' -f3)
    local failed=$(echo "$stats" | cut -d'|' -f4)
    local retrying=$(echo "$stats" | cut -d'|' -f5)
    local avg_retries=$(echo "$stats" | cut -d'|' -f6)
    local max_retries=$(echo "$stats" | cut -d'|' -f7)
    local queues=$(echo "$stats" | cut -d'|' -f8)
    
    echo -e "${BLUE}üî¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:${NC} ${YELLOW}$total${NC}"
    echo ""
    
    echo -e "${GREEN}üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:${NC}"
    echo "‚îú‚îÄ üü° –û–∂–∏–¥–∞—é—â–∏–µ (pending):     $pending"
    echo "‚îú‚îÄ üü¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ (sent):     $sent"
    echo "‚îú‚îÄ üî¥ –ù–µ—É–¥–∞—á–Ω—ã–µ (failed):      $failed"
    echo "‚îî‚îÄ üü† –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ (retrying):    $retrying"
    echo ""
    
    echo -e "${MAGENTA}üîÑ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–í–¢–û–†–û–í:${NC}"
    echo "‚îú‚îÄ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: ${avg_retries:-0}"
    echo "‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:    ${max_retries:-0}"
    echo "‚îî‚îÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π:        $queues"
    echo ""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥—è–º
    echo -e "${CYAN}üìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–ß–ï–†–ï–î–Ø–ú:${NC}"
    execute_sql "SELECT 
        queue as '–û—á–µ—Ä–µ–¥—å',
        COUNT(*) as '–í—Å–µ–≥–æ',
        SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as '–û–∂–∏–¥–∞–µ—Ç',
        SUM(CASE WHEN status = 'sent' THEN 1 ELSE 0 END) as '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as '–û—à–∏–±–∫–∏',
        SUM(CASE WHEN status = 'retrying' THEN 1 ELSE 0 END) as '–ü–æ–≤—Ç–æ—Ä—ã'
    FROM messages 
    GROUP BY queue 
    ORDER BY COUNT(*) DESC"
    echo ""
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    echo -e "${YELLOW}‚è∞ –í–†–ï–ú–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:${NC}"
    execute_sql "SELECT 
        '–°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' as '–ü–∞—Ä–∞–º–µ—Ç—Ä',
        datetime(MIN(created_at), 'localtime') as '–ó–Ω–∞—á–µ–Ω–∏–µ'
    FROM messages
    UNION ALL
    SELECT 
        '–°–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        datetime(MAX(created_at), 'localtime')
    FROM messages
    UNION ALL
    SELECT 
        '–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        ROUND(page_count * page_size / 1024.0 / 1024.0, 2) || ' MB'
    FROM pragma_page_count(), pragma_page_size()"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
show_messages() {
    local page="$1"
    local limit="$2"
    local status_filter="$3"
    local queue_filter="$4"
    local format="$5"
    
    local offset=$((($page - 1) * $limit))
    local where_clause=""
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ WHERE clause
    local conditions=()
    if [[ -n "$status_filter" ]]; then
        conditions+=("status = '$status_filter'")
    fi
    if [[ -n "$queue_filter" ]]; then
        conditions+=("queue = '$queue_filter'")
    fi
    
    if [[ ${#conditions[@]} -gt 0 ]]; then
        where_clause="WHERE $(IFS=' AND '; echo "${conditions[*]}")"
    fi
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    local total=$(execute_sql "SELECT COUNT(*) FROM messages $where_clause" "raw")
    local total_pages=$(( ($total + $limit - 1) / $limit ))
    
    if [[ "$format" == "json" ]]; then
        execute_sql "SELECT 
            id, queue, status, retries, 
            datetime(created_at, 'localtime') as created_at,
            datetime(updated_at, 'localtime') as updated_at,
            error
        FROM messages 
        $where_clause 
        ORDER BY created_at DESC 
        LIMIT $limit OFFSET $offset" json
        return
    fi
    
    echo -e "${CYAN}üìù –°–û–û–ë–©–ï–ù–ò–Ø (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ $page –∏–∑ $total_pages, –≤—Å–µ–≥–æ: $total)${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    if [[ -n "$status_filter" ]]; then
        echo -e "üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: ${YELLOW}$status_filter${NC}"
    fi
    if [[ -n "$queue_filter" ]]; then
        echo -e "üîç –§–∏–ª—å—Ç—Ä –ø–æ –æ—á–µ—Ä–µ–¥–∏: ${YELLOW}$queue_filter${NC}"
    fi
    echo ""
    
    execute_sql "SELECT 
        SUBSTR(id, 1, 12) || '...' as 'ID',
        queue as '–û—á–µ—Ä–µ–¥—å',
        status as '–°—Ç–∞—Ç—É—Å',
        retries as '–ü–æ–ø—ã—Ç–∫–∏',
        datetime(created_at, 'localtime') as '–°–æ–∑–¥–∞–Ω–æ',
        CASE 
            WHEN LENGTH(error) > 50 THEN SUBSTR(error, 1, 47) || '...'
            ELSE COALESCE(error, '')
        END as '–û—à–∏–±–∫–∞'
    FROM messages 
    $where_clause 
    ORDER BY created_at DESC 
    LIMIT $limit OFFSET $offset"
    
    echo ""
    echo -e "${BLUE}üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ $page –∏–∑ $total_pages${NC}"
    if [[ $page -lt $total_pages ]]; then
        echo -e "   –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${YELLOW}$0 --messages --page $((page + 1)) --limit $limit${NC}"
    fi
    if [[ $page -gt 1 ]]; then
        echo -e "   –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${YELLOW}$0 --messages --page $((page - 1)) --limit $limit${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
show_message_details() {
    local message_id="$1"
    local format="$2"
    
    local count=$(execute_sql "SELECT COUNT(*) FROM messages WHERE id = '$message_id'" "raw")
    
    if [[ "$count" -eq 0 ]]; then
        echo -e "${RED}‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID '$message_id' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${NC}" >&2
        return 1
    fi
    
    if [[ "$format" == "json" ]]; then
        execute_sql "SELECT 
            id, path, queue, body, headers, timestamp,
            retries, status, error,
            datetime(created_at, 'localtime') as created_at,
            datetime(updated_at, 'localtime') as updated_at,
            datetime(next_retry_at, 'localtime') as next_retry_at
        FROM messages WHERE id = '$message_id'" json
        return
    fi
    
    echo -e "${CYAN}üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–û–û–ë–©–ï–ù–ò–ò${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    execute_sql "SELECT 
        'ID' as '–ü–∞—Ä–∞–º–µ—Ç—Ä', id as '–ó–Ω–∞—á–µ–Ω–∏–µ' FROM messages WHERE id = '$message_id'
    UNION ALL SELECT '–ü—É—Ç—å', path FROM messages WHERE id = '$message_id'
    UNION ALL SELECT '–û—á–µ—Ä–µ–¥—å', queue FROM messages WHERE id = '$message_id'
    UNION ALL SELECT '–°—Ç–∞—Ç—É—Å', status FROM messages WHERE id = '$message_id'
    UNION ALL SELECT '–ü–æ–ø—ã—Ç–∫–∏', CAST(retries as TEXT) FROM messages WHERE id = '$message_id'
    UNION ALL SELECT '–°–æ–∑–¥–∞–Ω–æ', datetime(created_at, 'localtime') FROM messages WHERE id = '$message_id'
    UNION ALL SELECT '–û–±–Ω–æ–≤–ª–µ–Ω–æ', datetime(updated_at, 'localtime') FROM messages WHERE id = '$message_id'
    UNION ALL SELECT '–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞', COALESCE(datetime(next_retry_at, 'localtime'), '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞') FROM messages WHERE id = '$message_id'"
    
    echo ""
    echo -e "${YELLOW}üìã –ó–ê–ì–û–õ–û–í–ö–ò:${NC}"
    execute_sql "SELECT headers FROM messages WHERE id = '$message_id'" "raw"
    
    echo ""
    echo -e "${YELLOW}üìÑ –¢–ï–õ–û –°–û–û–ë–©–ï–ù–ò–Ø:${NC}"
    local body=$(execute_sql "SELECT SUBSTR(body, 1, 500) FROM messages WHERE id = '$message_id'" "raw")
    echo "$body"
    if [[ ${#body} -eq 500 ]]; then
        echo "... (–æ–±—Ä–µ–∑–∞–Ω–æ, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)"
    fi
    
    echo ""
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê:${NC}"
    local error=$(execute_sql "SELECT COALESCE(error, '–ù–µ—Ç –æ—à–∏–±–æ–∫') FROM messages WHERE id = '$message_id'" "raw")
    echo "$error"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
show_failed_details() {
    local format="$1"
    
    if [[ "$format" == "json" ]]; then
        execute_sql "SELECT 
            error,
            COUNT(*) as count,
            AVG(retries) as avg_retries,
            MAX(retries) as max_retries,
            GROUP_CONCAT(queue) as affected_queues
        FROM messages 
        WHERE status IN ('failed', 'retrying') AND error IS NOT NULL
        GROUP BY error 
        ORDER BY count DESC" json
        return
    fi
    
    echo -e "${RED}üö® –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    local failed_count=$(execute_sql "SELECT COUNT(*) FROM messages WHERE status IN ('failed', 'retrying')" "raw")
    echo -e "${BLUE}üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏: ${YELLOW}$failed_count${NC}"
    echo ""
    
    echo -e "${YELLOW}üî• –¢–û–ü –û–®–ò–ë–û–ö:${NC}"
    execute_sql "SELECT 
        CASE 
            WHEN LENGTH(error) > 60 THEN SUBSTR(error, 1, 57) || '...'
            ELSE error
        END as '–û—à–∏–±–∫–∞',
        COUNT(*) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        ROUND(AVG(retries), 1) as '–°—Ä–µ–¥.–ø–æ–ø—ã—Ç–∫–∏',
        MAX(retries) as '–ú–∞–∫—Å.–ø–æ–ø—ã—Ç–∫–∏'
    FROM messages 
    WHERE status IN ('failed', 'retrying') AND error IS NOT NULL
    GROUP BY error 
    ORDER BY COUNT(*) DESC 
    LIMIT 10"
    
    echo ""
    echo -e "${MAGENTA}üìã –û–®–ò–ë–ö–ò –ü–û –û–ß–ï–†–ï–î–Ø–ú:${NC}"
    execute_sql "SELECT 
        queue as '–û—á–µ—Ä–µ–¥—å',
        COUNT(*) as '–û—à–∏–±–æ–∫',
        COUNT(DISTINCT error) as '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö',
        ROUND(AVG(retries), 1) as '–°—Ä–µ–¥.–ø–æ–ø—ã—Ç–∫–∏'
    FROM messages 
    WHERE status IN ('failed', 'retrying')
    GROUP BY queue 
    ORDER BY COUNT(*) DESC"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
show_retry_analysis() {
    local format="$1"
    
    if [[ "$format" == "json" ]]; then
        execute_sql "SELECT 
            retries,
            COUNT(*) as count,
            GROUP_CONCAT(DISTINCT status) as statuses,
            GROUP_CONCAT(DISTINCT queue) as queues
        FROM messages 
        WHERE retries > 0
        GROUP BY retries 
        ORDER BY retries" json
        return
    fi
    
    echo -e "${MAGENTA}üîÑ –ê–ù–ê–õ–ò–ó –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "${YELLOW}üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ü–û–ü–´–¢–û–ö:${NC}"
    execute_sql "SELECT 
        retries as '–ü–æ–ø—ã—Ç–∫–∏',
        COUNT(*) as '–°–æ–æ–±—â–µ–Ω–∏–π',
        ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM messages WHERE retries > 0), 1) || '%' as '–ü—Ä–æ—Ü–µ–Ω—Ç'
    FROM messages 
    WHERE retries > 0
    GROUP BY retries 
    ORDER BY retries"
    
    echo ""
    echo -e "${BLUE}‚è±Ô∏è –°–û–û–ë–©–ï–ù–ò–Ø –° –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ú–ò –ü–û–í–¢–û–†–ê–ú–ò:${NC}"
    execute_sql "SELECT 
        queue as '–û—á–µ—Ä–µ–¥—å',
        COUNT(*) as '–û–∂–∏–¥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞',
        MIN(datetime(next_retry_at, 'localtime')) as '–ë–ª–∏–∂–∞–π—à–∏–π –ø–æ–≤—Ç–æ—Ä',
        MAX(datetime(next_retry_at, 'localtime')) as '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–≤—Ç–æ—Ä'
    FROM messages 
    WHERE status = 'retrying' AND next_retry_at IS NOT NULL
    GROUP BY queue"
    
    echo ""
    echo -e "${GREEN}üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò:${NC}"
    local total_with_retries=$(execute_sql "SELECT COUNT(*) FROM messages WHERE retries > 0" "raw")
    local successful_after_retry=$(execute_sql "SELECT COUNT(*) FROM messages WHERE retries > 0 AND status = 'sent'" "raw")
    local failed_after_retry=$(execute_sql "SELECT COUNT(*) FROM messages WHERE retries > 0 AND status = 'failed'" "raw")
    
    if [[ $total_with_retries -gt 0 ]]; then
        local success_rate=$(( $successful_after_retry * 100 / $total_with_retries ))
        echo "‚îú‚îÄ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏: $total_with_retries"
        echo "‚îú‚îÄ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–æ–≤: $successful_after_retry"
        echo "‚îú‚îÄ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö: $failed_after_retry"
        echo "‚îî‚îÄ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤: ${success_rate}%"
    else
        echo "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
show_performance() {
    local format="$1"
    
    if [[ "$format" == "json" ]]; then
        cat << EOF
{
  "hourly_stats": $(execute_sql "SELECT 
    strftime('%Y-%m-%d %H:00', created_at) as hour,
    COUNT(*) as messages,
    SUM(CASE WHEN status = 'sent' THEN 1 ELSE 0 END) as sent,
    SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed
  FROM messages 
  WHERE created_at >= datetime('now', '-24 hours')
  GROUP BY strftime('%Y-%m-%d %H:00', created_at)
  ORDER BY hour DESC" json),
  "processing_times": $(execute_sql "SELECT 
    AVG(julianday(updated_at) - julianday(created_at)) * 24 * 60 as avg_processing_minutes,
    MIN(julianday(updated_at) - julianday(created_at)) * 24 * 60 as min_processing_minutes,
    MAX(julianday(updated_at) - julianday(created_at)) * 24 * 60 as max_processing_minutes
  FROM messages 
  WHERE status = 'sent' AND updated_at > created_at" json)
}
EOF
        return
    fi
    
    echo -e "${GREEN}‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    echo -e "${YELLOW}üìà –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê:${NC}"
    execute_sql "SELECT 
        strftime('%H:00', created_at) as '–ß–∞—Å',
        COUNT(*) as '–í—Å–µ–≥–æ',
        SUM(CASE WHEN status = 'sent' THEN 1 ELSE 0 END) as '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as '–û—à–∏–±–∫–∏',
        ROUND(SUM(CASE WHEN status = 'sent' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 1) || '%' as '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'
    FROM messages 
    WHERE created_at >= datetime('now', '-24 hours')
    GROUP BY strftime('%H', created_at)
    ORDER BY strftime('%H', created_at) DESC
    LIMIT 12"
    
    echo ""
    echo -e "${BLUE}‚è±Ô∏è –í–†–ï–ú–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô:${NC}"
    execute_sql "SELECT 
        '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω)' as '–ú–µ—Ç—Ä–∏–∫–∞',
        ROUND(AVG(julianday(updated_at) - julianday(created_at)) * 24 * 60, 2) as '–ó–Ω–∞—á–µ–Ω–∏–µ'
    FROM messages 
    WHERE status = 'sent' AND updated_at > created_at
    UNION ALL
    SELECT 
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
        ROUND(MIN(julianday(updated_at) - julianday(created_at)) * 24 * 60, 2)
    FROM messages 
    WHERE status = 'sent' AND updated_at > created_at
    UNION ALL
    SELECT 
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
        ROUND(MAX(julianday(updated_at) - julianday(created_at)) * 24 * 60, 2)
    FROM messages 
    WHERE status = 'sent' AND updated_at > created_at"
    
    echo ""
    echo -e "${CYAN}üöÄ –ü–†–û–ü–£–°–ö–ù–ê–Ø –°–ü–û–°–û–ë–ù–û–°–¢–¨:${NC}"
    execute_sql "SELECT 
        DATE(created_at) as '–î–∞—Ç–∞',
        COUNT(*) as '–°–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å',
        ROUND(COUNT(*) / 24.0, 1) as '–°–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å',
        SUM(CASE WHEN status = 'sent' THEN 1 ELSE 0 END) as '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    FROM messages 
    WHERE created_at >= datetime('now', '-7 days')
    GROUP BY DATE(created_at)
    ORDER BY DATE(created_at) DESC"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ—á–∏—Å—Ç–∫–µ
show_cleanup_suggestions() {
    echo -e "${CYAN}üßπ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –û–ß–ò–°–¢–ö–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    local old_sent=$(execute_sql "SELECT COUNT(*) FROM messages WHERE status = 'sent' AND created_at < datetime('now', '-7 days')" "raw")
    local old_failed=$(execute_sql "SELECT COUNT(*) FROM messages WHERE status = 'failed' AND created_at < datetime('now', '-30 days')" "raw")
    local total_size=$(execute_sql "SELECT ROUND(page_count * page_size / 1024.0 / 1024.0, 2) FROM pragma_page_count(), pragma_page_size()" "raw")
    
    echo -e "${YELLOW}üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –î–õ–Ø –û–ß–ò–°–¢–ö–ò:${NC}"
    echo "‚îú‚îÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π: $old_sent"
    echo "‚îú‚îÄ –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π: $old_failed"
    echo "‚îî‚îÄ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã: ${total_size} MB"
    echo ""
    
    if [[ $old_sent -gt 0 ]]; then
        echo -e "${GREEN}‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π${NC}"
        echo "   SQL –∫–æ–º–∞–Ω–¥–∞:"
        echo "   DELETE FROM messages WHERE status = 'sent' AND created_at < datetime('now', '-7 days');"
        echo ""
    fi
    
    if [[ $old_failed -gt 0 ]]; then
        echo -e "${GREEN}‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π${NC}"
        echo "   SQL –∫–æ–º–∞–Ω–¥–∞:"
        echo "   DELETE FROM messages WHERE status = 'failed' AND created_at < datetime('now', '-30 days');"
        echo ""
    fi
    
    echo -e "${BLUE}üîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø:${NC}"
    echo "‚îú‚îÄ –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã: sqlite3 $DB_PATH 'ANALYZE;'"
    echo "‚îú‚îÄ –í–∞–∫—É—É–º: sqlite3 $DB_PATH 'VACUUM;'"
    echo "‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: sqlite3 $DB_PATH 'PRAGMA integrity_check;'"
    echo "‚îî‚îÄ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç: systemctl status messagebridge | grep cleanup"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
MODE="summary"
PAGE=$DEFAULT_PAGE
LIMIT=$DEFAULT_LIMIT
STATUS_FILTER=""
QUEUE_FILTER=""
MESSAGE_ID=""
OUTPUT_FORMAT="table"
USE_COLOR=true

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--database)
            DB_PATH="$2"
            shift 2
            ;;
        --summary)
            MODE="summary"
            shift
            ;;
        --messages)
            MODE="messages"
            shift
            ;;
        --status)
            STATUS_FILTER="$2"
            if [[ "$MODE" == "summary" ]]; then
                MODE="messages"
            fi
            shift 2
            ;;
        --queue)
            QUEUE_FILTER="$2"
            if [[ "$MODE" == "summary" ]]; then
                MODE="messages"
            fi
            shift 2
            ;;
        --message-id)
            MESSAGE_ID="$2"
            MODE="message-details"
            shift 2
            ;;
        --failed-details)
            MODE="failed-details"
            shift
            ;;
        --retry-analysis)
            MODE="retry-analysis"
            shift
            ;;
        --performance)
            MODE="performance"
            shift
            ;;
        --cleanup-suggestions)
            MODE="cleanup-suggestions"
            shift
            ;;
        --page)
            PAGE="$2"
            shift 2
            ;;
        --limit)
            LIMIT="$2"
            shift 2
            ;;
        --json)
            OUTPUT_FORMAT="json"
            shift
            ;;
        --csv)
            OUTPUT_FORMAT="csv"
            shift
            ;;
        --no-color)
            USE_COLOR=false
            shift
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1${NC}" >&2
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏" >&2
            exit 1
            ;;
    esac
done

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [[ "$USE_COLOR" == false ]] || [[ "$OUTPUT_FORMAT" != "table" ]]; then
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    CYAN=""
    NC=""
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
if [[ -n "$STATUS_FILTER" ]] && [[ ! "$STATUS_FILTER" =~ ^(pending|sent|failed|retrying)$ ]]; then
    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: $STATUS_FILTER${NC}" >&2
    echo "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã: pending, sent, failed, retrying" >&2
    exit 1
fi

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
case "$MODE" in
    "summary")
        show_summary "$OUTPUT_FORMAT"
        ;;
    "messages")
        show_messages "$PAGE" "$LIMIT" "$STATUS_FILTER" "$QUEUE_FILTER" "$OUTPUT_FORMAT"
        ;;
    "message-details")
        show_message_details "$MESSAGE_ID" "$OUTPUT_FORMAT"
        ;;
    "failed-details")
        show_failed_details "$OUTPUT_FORMAT"
        ;;
    "retry-analysis")
        show_retry_analysis "$OUTPUT_FORMAT"
        ;;
    "performance")
        show_performance "$OUTPUT_FORMAT"
        ;;
    "cleanup-suggestions")
        show_cleanup_suggestions
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $MODE${NC}" >&2
        exit 1
        ;;
esac 